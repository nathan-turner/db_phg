<?php
// module/Pinnacle/src/Pinnacle/Model/PhysiciansTable.php:
namespace Pinnacle\Model;

use Zend\Db\Adapter\Adapter;
use Zend\Db\Sql\Sql;
use Zend\Db\Sql\Select;
use Zend\Db\Sql\Where;
use Zend\View\Renderer\PhpRenderer;
use Zend\Mvc\Controller\AbstractController;

class PhysiciansTable extends Report\ReportTable
{

    public function __construct(Adapter $adapter) {
        parent::__construct($adapter,'vPhLookupSmall',
            '`ph_id`, `ctct_name`, `ctct_title`, `st_name`, `phone`, `ctct_addr_c`, `ctct_st_code`, `ph_spec_main`, `ph_status`, `ph_recruiter`, `ph_licenses`, `ph_cv_date`, `ph_src_date`, `ph_pref_state`, `ph_pref_region`, `ph_subspec`, `ph_datasrc`, `ph_citizen`, `ph_practice`, `ph_skill`, `ph_locums`, ctct_id');
    }
    
    /**
     * @param array $ar     keys: see PhysiciansForm
    */
    public function buildQuery(array $ar = null) {
        if( is_array($ar) && $ar['emp_id'] ) {
            $where = new Where();
            $nduh = 0;

            if( trim($ar['ph_id']) ) {
                $where->equalTo('ph_id',$ar['ph_id']);
                return $where;
            }

            if( trim($ar['ph_lname']) && trim($ar['ph_fname']) ) {
                $ln = trim($ar['ph_lname']); $fn = trim($ar['ph_fname']);
                $like1 = addslashes("$ln%, $fn%");
                $like2 = addslashes("$fn% $ln%");
                $where->nest->like('ctct_name',$like1)->or->like('ctct_name',$like2)->unnest;
                $nduh++;
            }
            elseif( trim($ar['ph_lname']) ) {
                $ln = trim($ar['ph_lname']);
                $like1 = addslashes("$ln%"); // will also find some first names
                $like2 = addslashes("% $ln%"); // and stuff like III,Jr,Esq,etc
                $where->nest->like('ctct_name',$like1)->or->like('ctct_name',$like2)->unnest;
                $nduh++;
            }
            elseif( trim($ar['ph_fname']) ) {
                $fn = trim($ar['ph_fname']);
                $like1 = addslashes("$fn%"); // will also find last names
                $like2 = addslashes("%, $fn%"); // and II,III,Jr.,esq.,etc.
                $where->nest->like('ctct_name',$like1)->or->like('ctct_name',$like2)->unnest;
                $nduh++;
            }

            if( $ar['ph_spec_main'] ) {
                $spec = trim(substr($ar['ph_spec_main'],0,3));
                $skill = substr($ar['ph_spec_main'],3);
                $where->equalTo('ph_spec_main',$spec); $nduh++;
                if( $skill && $skill !== '--' && $skill !== '  ' ) $where->equalTo('ph_skill',$skill); 
            }
            if( strlen(trim($ar['ph_subspec'])) > 2 ) {
                $like = addslashes(trim($ar['ph_subspec']));
                $where->like('ph_subspec',"%$like%"); $nduh++;
            }
            if( $ar['ph_src_date'] ) {
                $ival = '';
                switch( $ar['ph_src_date'] ) {
                    case '1': // '< Yesterday',
                        $ival = 'INTERVAL 1 DAY'; break;
                    case '2': // '< 1 week ago',
                        $ival = 'INTERVAL 7 DAY'; break;
                    case '3': // '< 2 weeks ago',
                        $ival = 'INTERVAL 14 DAY'; break;
                    case '4': // '< 1 month ago',
                        $ival = 'INTERVAL 1 MONTH'; break;
                    case '5': // '< 2 months ago',
                        $ival = 'INTERVAL 2 MONTH'; break;
                    case '6': // '< 6 months ago',
                        $ival = 'INTERVAL 6 MONTH'; break;
                    case '7': // '< 1 year ago',
                        $ival = 'INTERVAL 1 YEAR'; break;
                }
                if( $ival ) {
                    $where->literal('ph_src_date >= CURDATE()-'.$ival); $nduh++;
                }
            }
            if( $ar['ph_pref_state'] ) {
                $like = addslashes(trim($ar['ph_pref_state']));
                $where->like('ph_pref_state',"$like%"); $nduh++;
            }
            if( $ar['ph_licenses'] ) {
                $like = addslashes(trim($ar['ph_licenses']));
                $where->like('ph_licenses',"$like%"); $nduh++;
            }
            if( $ar['ctct_st_code'] ) { $where->equalTo('ctct_st_code',$ar['ctct_st_code']); $nduh++; }
            if( $ar['ph_pref_region'] >= 0 ) { $where->equalTo('ph_pref_region',$ar['ph_pref_region']); $nduh++; }
            if( $ar['ph_citizen'] ) { $where->equalTo('ph_citizen',$ar['ph_citizen']); $nduh++; }
            if( $ar['ph_recruiter'] ) { $where->equalTo('ph_recruiter',$ar['ph_recruiter']); $nduh++; }
            if( $ar['ph_locums'] ) { $where->equalTo('ph_locums',$ar['ph_locums']); $nduh++; }
            if( $ar['ph_status'] >= 0 ) { $where->equalTo('ph_status',$ar['ph_status']); $nduh++; }
            if( $ar['date1'] && $ar['date2'] ) { $where->between('ph_cv_date',$ar['date1'],$ar['date2']);$nduh++; }
            elseif( $ar['date1'] ) { $where->greaterThanOrEqualTo('ph_cv_date',$ar['date1']); $nduh++; }
            elseif( $ar['date2'] ) { $where->lessThanOrEqualTo('ph_cv_date',$ar['date2']); $nduh++; }

            return $nduh? $where: false; // don't allow empty criteria
        }
        return false;
    }

    public function fetchAll($id = 0, array $ar = null) {
        $where = $this->buildQuery($ar);
        if( $where ) {
            $select = new Select($this->table);
            $select->where($where);
            $select->order('ctct_name');
            $limit = (int) $ar['pg_size']; if( !$limit || $limit > 200 ) $limit = 25;
            $select->limit($limit);
            $id--; if( $id < 0 ) $id = 0;
            $offset = $id * $limit;
            $select->offset($offset);
            $resultSet = $this->selectWith($select);
            return $resultSet;
        }
        return false;
    }

    public function getResortPages(array $ar = null) {
        $where = $this->buildQuery($ar);
        if( $where ) {
            $pgsize = (int) $ar['pg_size']; if( !$pgsize ) $pgsize = 25;
            $sql = new Sql($this->adapter);
            $select = $sql->select();
            $select->from($this->table);
            $select->where($where);
            $select->columns(array('*'), false);
            $str = $sql->getSqlStringForSqlObject($select);
            $str = str_replace('SELECT * ','SELECT count(*) as cnt ',$str); // awful
            $rowSet = $this->adapter->query($str)->execute();
            foreach ($rowSet as $rec)
                $total = $rec['cnt'];
            if( $total ) $total += $pgsize;
            return intval($total / $pgsize);
        }
        return 0;
    }
    
    public function saveResortPages($uid,$lid,array $ar = null) {
        $where = $this->buildQuery($ar);
        $uid = (int) $uid; $lid = (int) $lid;
        if( $where && $uid && $lid ) {
            $sql = new Sql($this->adapter);
            $select = $sql->select();
            $select->from($this->table);
            $select->where($where);
            $select->columns(array('*'), false);
            $str = $sql->getSqlStringForSqlObject($select);
            $param = "INSERT IGNORE INTO custlistsus (owneruid,listid,ctype,memberuid) SELECT $uid,$lid,3,ctct_id ";
            $str = str_replace('SELECT * ',$param,$str); // awful
            $result = $this->adapter->query($str,Adapter::QUERY_MODE_EXECUTE);
            return $result;
        }
        return 0;
    }

    public function getResort(AbstractController $ctrl, $id = 0, array $ar = null) {
        $res = $this->fetchAll($id,$ar);
        $a = array();
        $vm = new PhpRenderer();
        $urls = $ctrl->url();
        if( $res ) foreach ($res as $row) {
            $ar = array();
            $ar['url'] = $urls->fromRoute('physician', array('action'=>'view', 'part'=>'go', 'id' => $row->ph_id));
            if( !$row->ctct_addr_c ) $row->ctct_addr_c = ' ';

            foreach ($row->getArrayCopy() as $k=>$v)
                $ar[$k] = $vm->escapeHtml($v);
            $a[] = $ar;
        }
        else $a[] = 'No records in the range';
        return $a;
    }


}
