<?php
// module/Pinnacle/src/Pinnacle/Controller/ReportController.php:
namespace Pinnacle\Controller;

use Zend\Mvc\Controller\AbstractActionController;
use Zend\View\Model\ViewModel;
use Pinnacle\Form\DateForm;
use Pinnacle\Form\Report\PlacementForm;
use Pinnacle\Form\Report\PlacemonthForm;
use Pinnacle\Form\Report\MarketlogForm;
use Pinnacle\Model\Utility;
use Pinnacle\Form\Report\InterviewForm;

class ReportController extends AbstractActionController
{
    protected $retainedTable;
    protected $retainedMacTable;
    protected $specdemoTable;
    protected $statisticsTable;
    protected $monmorTable;
    protected $phoneTable;
    protected $usersTable;
    protected $specialtyTable;
    protected $placementTable;
    protected $placemonthTable;
    protected $marketlogTable;
    protected $interviewTable;

    public function indexAction() {
        $identity = $this->getServiceLocator()
            ->get('Application\Model\LoginService')->checkAuth();
        if (!$identity) {
            return $this->redirect()->toRoute('login');
        }
        $part = $this->params()->fromRoute('part', 'common');

        $messages = $this->flashMessenger()->hasMessages()?
            $this->flashMessenger()->getMessages(): null;
        
        return array('phguser' => $identity,
            'part' => $part, 'messages' => $messages );
    }
    public function listAction() {
        return $this->indexAction(); // the same action but different template
    }

    public function phoneAction() {
        $identity = $this->getServiceLocator()
            ->get('Application\Model\LoginService')->checkAuth();
        if (!$identity) {
            return $this->redirect()->toRoute('login');
        }
        $prg = $this->prg();
        if ($prg instanceof \Zend\Http\PhpEnvironment\Response) return $prg;
        $part = $this->params()->fromRoute('part', 'yest');

        $messages = $this->flashMessenger()->hasMessages()?
            $this->flashMessenger()->getMessages(): null;

        $newd = strtotime('yesterday');
        $date = date('Y-m-d',$newd);
        $form = new DateForm(1, array('label1' => 'Jump to date:', 'submit' => 'GO',
                                      'max'=> $date,  ));
        if( $prg !== false ) {
            $form->setData($prg);
    
            if ($form->isValid()) {
                $ar = $form->getData();
                $pastd = $ar['date1'];
                $newd = strtotime($pastd);
                if( $newd ) $date = date('Y-m-d',$newd);
            }
            else {
                if( !$messages ) $messages = array();
                $messages[] = 'Date entered is not valid';
            }
        }

        $table = $this->getPhoneTable();
        $report = $part !== 'today'? $table->fetchDate($date): $table->fetchAll();
        $date = date('m/d/Y',$newd);
        return array('phguser' => $identity,
            'report' => $report, 'form' => $form,
            'date' => $date, 'part' => $part, 'messages' => $messages );
    }

    public function interviewAction() {
        $identity = $this->getServiceLocator()
            ->get('Application\Model\LoginService')->checkAuth();
        if (!$identity) {
            return $this->redirect()->toRoute('login');
        }

        $messages = $this->flashMessenger()->hasMessages()?
            $this->flashMessenger()->getMessages(): null;

        $ar = array('yer'=>date('Y'),'mon'=>date('n'));
        $part = $this->params()->fromRoute('part', 'Y'.date('Y'));
        $id = (int) $this->params()->fromRoute('id', 0);
        $yer = (int) substr($part,1,4);
        if( $yer && is_numeric($yer) ) $ar['yer'] = $yer;
        else $part = 'Y'.$ar['yer'];
        if( $id > 0 && $id < 13 ) $ar['mon'] = $id;
        else $id = $ar['mon'];
        
        $months = Utility::getClass('Pinnacle\Model\DictMonths')->getMonths();
        
        $request = $this->getRequest();
        $form = new InterviewForm($months);
        $form->setData($ar);
        if ($request->isPost()) {
            $form->setData($request->getPost());
            if ($form->isValid()) {
                $ar = $form->getData();
                $part = 'Y'.$ar['yer'];
                if( !$ar['mon'] ) $ar['mon'] = date('n');
                $id = $ar['mon'];
                return $this->redirect()->toRoute('report',array('action'=>'interview',
                                    'part'=>$part,'id'=>$id));
            }
            else {
                if( !$messages ) $messages = array();
                $messages[] = 'Selection criteria is not valid';
            }
        }

        return array('phguser' => $identity, 'part' => $part, 'months' => $months,
            'report' => $this->getInterviewTable()->fetchAll($ar), 'form' => $form,
            'messages' => $messages, 'id' => $id );
    }
    
    public function marketlogAction() {
        $identity = $this->getServiceLocator()
            ->get('Application\Model\LoginService')->checkAuth();
        if (!$identity) {
            return $this->redirect()->toRoute('login');
        }
        $prg = $this->prg();
        if ($prg instanceof \Zend\Http\PhpEnvironment\Response) return $prg;

        $messages = $this->flashMessenger()->hasMessages()?
            $this->flashMessenger()->getMessages(): null;

        $part = $this->params()->fromRoute('part', 'sort');
        $ar = array('yer'=>date('Y'));
        if( $part == 'mark' ) $ar['ord'] = $part;
        
        $months = Utility::getClass('Pinnacle\Model\DictMonths')->getMonths();
        
        $form = new MarketlogForm($this->getUsersTable());
        if( $prg !== false ) {
            $form->setData($prg);
            if ($form->isValid()) 
                $ar = $form->getData();
            else {
                if( !$messages ) $messages = array();
                $messages[] = 'Selection criteria is not valid';
            }
        }

        return array('phguser' => $identity, 'part' => $part, 'months' => $months,
            'report' => $this->getMarketlogTable()->fetchAll($ar), 'form' => $form,
            'messages' => $messages );
    }
    
    public function placemonthAction() {
        $identity = $this->getServiceLocator()
            ->get('Application\Model\LoginService')->checkAuth();
        if (!$identity) {
            return $this->redirect()->toRoute('login');
        }
        $prg = $this->prg();
        if ($prg instanceof \Zend\Http\PhpEnvironment\Response) return $prg;

        $messages = $this->flashMessenger()->hasMessages()?
            $this->flashMessenger()->getMessages(): null;

        $ar = array('yer'=>date('Y'));
        
        $form = new PlacemonthForm($this->getSpecialtyTable());
        if( $prg !== false ) {
            $form->setData($prg);
            if ($form->isValid()) 
                $ar = $form->getData();
            else {
                if( !$messages ) $messages = array();
                $messages[] = 'Selection criteria is not valid';
            }
        }

        return array('phguser' => $identity,
            'report' => $this->getPlacemonthTable()->fetchAll($ar), 'form' => $form,
            'messages' => $messages );
    }

    public function placementAction() {
        $identity = $this->getServiceLocator()
            ->get('Application\Model\LoginService')->checkAuth();
        if (!$identity) {
            return $this->redirect()->toRoute('login');
        }
        $prg = $this->prg();
        if ($prg instanceof \Zend\Http\PhpEnvironment\Response) return $prg;

        $messages = $this->flashMessenger()->hasMessages()?
            $this->flashMessenger()->getMessages(): null;

        $ar = null;
        $form = new PlacementForm($this->getSpecialtyTable());
        if( $prg !== false ) {
            $form->setData($prg);
            if ($form->isValid()) 
                $ar = $form->getData();
            else {
                if( !$messages ) $messages = array();
                $messages[] = 'Selection criteria is not valid';
            }
        }

        return array('phguser' => $identity,
            'report' => $this->getPlacementTable()->fetchAll($ar), 'form' => $form,
            'messages' => $messages );
    }

    public function retainedAction() {
        $identity = $this->getServiceLocator()
            ->get('Application\Model\LoginService')->checkAuth();
        if (!$identity) {
            return $this->redirect()->toRoute('login');
        }
        $part = $this->params()->fromRoute('part', 'sort');
        $id = (int) $this->params()->fromRoute('id', 0);

        $messages = $this->flashMessenger()->hasMessages()?
            $this->flashMessenger()->getMessages(): null;

        $table = $part === 'mac'? $this->getRetainedMacTable(): $this->getRetainedTable();
        return array('phguser' => $identity,
            'report' => $table->fetchAll($id), 'order' => $table->getOrderStrings(),
            'id' => $id, 'part' => $part, 'messages' => $messages );
    }
    
    public function fulistAction() {
        $identity = $this->getServiceLocator()
            ->get('Application\Model\LoginService')->checkAuth();
        if (!$identity) {
            return $this->redirect()->toRoute('login');
        }
        $id = (int) $this->params()->fromRoute('id', 0);

        $messages = $this->flashMessenger()->hasMessages()?
            $this->flashMessenger()->getMessages(): null;

        return array('phguser' => $identity,
            'id' => $id, 'messages' => $messages );
    }
    
    public function specdemoAction() {
        $identity = $this->getServiceLocator()
            ->get('Application\Model\LoginService')->checkAuth();
        if (!$identity) {
            return $this->redirect()->toRoute('login');
        }
        $part = $this->params()->fromRoute('part', 'list');
        $id = (int) $this->params()->fromRoute('id', 0);

        $messages = $this->flashMessenger()->hasMessages()?
            $this->flashMessenger()->getMessages(): null;

        $request = $this->getRequest();
        $demo = $this->getSpecdemoTable()->fetchAll();

        if ($request->isPost()) {
            $sid = $request->getPost('sid', '0');
            $sid = (int) $sid;
            if( $sid ) $id = $sid;
        }
        $report = $this->getSpecdemoTable()->getDemo($id);
                
        return array('phguser' => $identity,
            'report' => $report, 'demo' => $demo,
            'id' => $id, 'part' => $part, 'messages' => $messages );
    }
    
    public function statisticsAction() {
        $identity = $this->getServiceLocator()
            ->get('Application\Model\LoginService')->checkAuth();
        if (!$identity) {
            return $this->redirect()->toRoute('login');
        }
        $part = $this->params()->fromRoute('part', 'sel0');
        $id = (int) $this->params()->fromRoute('id', 19);

        $messages = $this->flashMessenger()->hasMessages()?
            $this->flashMessenger()->getMessages(): null;

        $request = $this->getRequest();

        if ($request->isPost()) {
            $sid = $request->getPost('snum', '19');
            $sid = (int) $sid;
            if( $sid ) $id = $sid;
        }
        $report = $this->getStatisticsTable()->fetchAll($part, $id);
        /*  StatisticsTable is not really a table,
         *  and not even a TableGateway, but iface is the same
         *  for convenience.
         *  Returns object, and view template knows about it
         *  */
                
        return array('phguser' => $identity,
            'report' => $report,
            'id' => $id, 'part' => $part, 'messages' => $messages );
    }
    
    public function monmorAction() {
        $identity = $this->getServiceLocator()
            ->get('Application\Model\LoginService')->checkAuth();
        if (!$identity) {
            return $this->redirect()->toRoute('login');
        }

        $messages = $this->flashMessenger()->hasMessages()?
            $this->flashMessenger()->getMessages(): null;

        $report = $this->getMonmorTable()->fetchAll();
        // MonmorTable is not really a table either.

        return array('phguser' => $identity, 'report' => $report, 'messages' => $messages );
    }

    public function getRetainedTable() {
        return $this->reportTableFactory('retainedTable');
    }
    public function getRetainedMacTable() {
        return $this->reportTableFactory('retainedMacTable');
    }
    public function getSpecdemoTable() {
        return $this->reportTableFactory('specdemoTable');
    }
    public function getStatisticsTable() {
        return $this->reportTableFactory('statisticsTable');
    }
    public function getMonmorTable() {
        return $this->reportTableFactory('monmorTable');
    }
    public function getPhoneTable() {
        return $this->reportTableFactory('phoneTable');
    }
    public function getUsersTable() {
        return $this->reportTableFactory('usersTable','');
    }
    public function getSpecialtyTable() {
        return $this->reportTableFactory('specialtyTable','');
    }
    public function getPlacementTable() {
        return $this->reportTableFactory('placementTable');
    }
    public function getPlacemonthTable() {
        return $this->reportTableFactory('placemonthTable');
    }
    public function getMarketlogTable() {
        return $this->reportTableFactory('marketlogTable');
    }
    public function getInterviewTable() {
        return $this->reportTableFactory('interviewTable');
    }

    protected function reportTableFactory($table,$submodel = 'Report\\') {
        if (!$this->$table) {
            $sm = $this->getServiceLocator();
            $this->$table = $sm->get("Pinnacle\\Model\\$submodel".ucfirst($table));
        }
        return $this->$table;
    }
}
